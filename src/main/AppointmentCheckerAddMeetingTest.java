/*
* DO NOT MODIFY THIS COMMENT
* Generated by devmate
* Test model: 08e4e8f5-7e63-49af-bea1-7b88a2e704f2
*/

package main;

import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;
import static org.junit.jupiter.api.Assertions.assertEquals;

import java.lang.UnsupportedOperationException;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;
import java.util.stream.Stream;

import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;

@DisplayName("Testing Method addMeeting")
@SuppressWarnings("unused")
public class AppointmentCheckerAddMeetingTest {

//region Factories
	private static Calendar createDateNow(int hour, int minute) {
		// TODO: implement factory
		return null;
	}
//endregion

//region Test methods
	@DisplayName("addMeeting")
	@ParameterizedTest(name = "{0} [{index}] expected: ''{3}'' input: ''{1}'', ''{2}''")
	@MethodSource({"ExpectedReturnValueTests"})
	public void addMeetingTest(String testDescription, AppointmentChecker instance, MeetingAppointment meetingToCheck, boolean expected) {
		boolean actual = assertDoesNotThrow(() -> instance.addMeeting(meetingToCheck));
		assertEquals(expected, actual);
	}
//endregion

//region Test data
	private static Stream<Arguments> ExpectedReturnValueTests() {
		return Stream.of(
			Arguments.of(
				/* String testDescription = */ "p1:",
				/* AppointmentChecker instance = */ new AppointmentChecker(new ArrayList<>(List.of(new MeetingAppointment(createDateNow(12, 0), createDateNow(13, 0), "Devmate", MeetingType.jobMeeting), new MeetingAppointment(createDateNow(13, 20), createDateNow(13, 40), "break", MeetingType.privatMeeting), new MeetingAppointment(createDateNow(14, 0), createDateNow(16, 0), "Devmate", MeetingType.jobMeeting)))),
				/* MeetingAppointment meetingToCheck = */ new MeetingAppointment(createDateNow(10, 0), createDateNow(11, 30)),
				/* boolean expectedValue = */ false
			),
			Arguments.of(
				/* String testDescription = */ "p2:",
				/* AppointmentChecker instance = */ new AppointmentChecker(new ArrayList<>(List.of(new MeetingAppointment(createDateNow(12, 0), createDateNow(13, 0), "Devmate", MeetingType.jobMeeting), new MeetingAppointment(createDateNow(13, 20), createDateNow(13, 40), "break", MeetingType.privatMeeting), new MeetingAppointment(createDateNow(14, 0), createDateNow(16, 0), "Devmate", MeetingType.jobMeeting)))),
				/* MeetingAppointment meetingToCheck = */ new MeetingAppointment(createDateNow(12, 0), createDateNow(12, 20)),
				/* boolean expectedValue = */ false
			),
			Arguments.of(
				/* String testDescription = */ "n1: meetingToCheck: does not fit:",
				/* AppointmentChecker instance = */ new AppointmentChecker(new ArrayList<>(List.of(new MeetingAppointment(createDateNow(12, 0), createDateNow(13, 0), "Devmate", MeetingType.jobMeeting), new MeetingAppointment(createDateNow(13, 20), createDateNow(13, 40), "break", MeetingType.privatMeeting), new MeetingAppointment(createDateNow(14, 0), createDateNow(16, 0), "Devmate", MeetingType.jobMeeting)))),
				/* MeetingAppointment meetingToCheck = */ new MeetingAppointment(createDateNow(12, 15), createDateNow(12, 45)),
				/* boolean expectedValue = */ false
			),
			Arguments.of(
				/* String testDescription = */ "n2: meetingToCheck: does not fit:",
				/* AppointmentChecker instance = */ new AppointmentChecker(new ArrayList<>(List.of(new MeetingAppointment(createDateNow(12, 0), createDateNow(13, 0), "Devmate", MeetingType.jobMeeting), new MeetingAppointment(createDateNow(13, 20), createDateNow(13, 40), "break", MeetingType.privatMeeting), new MeetingAppointment(createDateNow(14, 0), createDateNow(16, 0), "Devmate", MeetingType.jobMeeting)))),
				/* MeetingAppointment meetingToCheck = */ new MeetingAppointment(createDateNow(12, 0), createDateNow(12, 30)),
				/* boolean expectedValue = */ false
			),
			Arguments.of(
				/* String testDescription = */ "n3: meetingToCheck: does not fit:",
				/* AppointmentChecker instance = */ new AppointmentChecker(new ArrayList<>(List.of(new MeetingAppointment(createDateNow(12, 0), createDateNow(13, 0), "Devmate", MeetingType.jobMeeting), new MeetingAppointment(createDateNow(13, 20), createDateNow(13, 40), "break", MeetingType.privatMeeting), new MeetingAppointment(createDateNow(14, 0), createDateNow(16, 0), "Devmate", MeetingType.jobMeeting)))),
				/* MeetingAppointment meetingToCheck = */ new MeetingAppointment(createDateNow(12, 30), createDateNow(13, 0)),
				/* boolean expectedValue = */ false
			),
			Arguments.of(
				/* String testDescription = */ "n4: meetingToCheck: invalid:",
				/* AppointmentChecker instance = */ new AppointmentChecker(new ArrayList<>(List.of(new MeetingAppointment(createDateNow(12, 0), createDateNow(13, 0), "Devmate", MeetingType.jobMeeting), new MeetingAppointment(createDateNow(13, 20), createDateNow(13, 40), "break", MeetingType.privatMeeting), new MeetingAppointment(createDateNow(14, 0), createDateNow(16, 0), "Devmate", MeetingType.jobMeeting)))),
				/* MeetingAppointment meetingToCheck = */ null,
				/* boolean expectedValue = */ false
			),
			Arguments.of(
				/* String testDescription = */ "n5: meetingToCheck: invalid:",
				/* AppointmentChecker instance = */ new AppointmentChecker(new ArrayList<>(List.of(new MeetingAppointment(createDateNow(12, 0), createDateNow(13, 0), "Devmate", MeetingType.jobMeeting), new MeetingAppointment(createDateNow(13, 20), createDateNow(13, 40), "break", MeetingType.privatMeeting), new MeetingAppointment(createDateNow(14, 0), createDateNow(16, 0), "Devmate", MeetingType.jobMeeting)))),
				/* MeetingAppointment meetingToCheck = */ new MeetingAppointment(createDateNow(12, 0), createDateNow(11, 0)),
				/* boolean expectedValue = */ false
			)
		);
	}
//endregion

}

/*
WARNING: Modification of this comment will make it impossible to merge user-defined changes

BEGIN_CODEGEN_DATA
H4sIAAAAAAAAAO1YXW/aSBR9JlL+w5Vf4kSOwUCalHSropBuK5VQbdiuVqt9GOwLmcSMvTNjEor4771jG2KC89GuxEM
LEnjmzp37cc6ZsUT1YHfnADo9uOj1odvrfHz/N/Q/fLyEs163e37RN6u/o0DJNAYwmEKAkzGNjb2PSsM4CjBsQe0Em3
gyPDo8xleNw+ZrNjwcIPMOjwcnJ6yOx7XmsE57qrs7uzsx82/YCGHMuDg1Bj6OI6lBaaa5D5EcudeJ4Jp+Y65Ruizmb
lsplJpHQrksHZ7/l7BQFfdfswlzQyZG7p9CJbGxYdCLTe207/zOx9gMTlc3JJqHbltKNv3ElS5bPGMhioDJsrXH9igt
kY3dy/RRLLK8uw5XccimF2yMp0+4xkyysXI/mweSgX/FwLDwgj2xjCY8oHlbjpIxCq2+Z1MX9VUUXEaJ9DHt5l2hYts
yNXAxgswNWBB0EY3F2ifXS+JColJ/MSnIpmwrEYnCwCzGySAkzv2QSIU2ccaFNtWdXaF/g7K9jJSKbWZSV6sSR8QjvG
e+jiRHtbtTiSWfkCwXGlpQBj7hr7FD34vo1qbgcEVNOGBGYy4SjfsmaqVSrUK/1+m1gDAJ0ZQAwzT+1KzqKxndgsBbe
FJatvU5RKawECQrcppDY+0TepW5aYLqy/pY6Sk7U6mvaWsV5lVcK+/WdGALmsNvYM1qc/hnxkWAd/N/Ae9i9KngFuzt
zRrzvT1qP050OvVo6phBnQZZ2CLZ9sw6z3f/gTqR4gsLEzS5lDU33jmBk4gXeU+LIfEbUWgad1D5kqcYOSU0Uz1EnPD
RgTxAwYfgyGJGqbcDgygilMWyrZzBhZkAp5uBUFgEde/rsldjpWxUiveJvQjq5HFeRFjANFsXYXb43ywP3Ft4DEo7b0
Gm9nyjGw1tY6wsAywtleoBlKNLbR9UwYq9luUsXZ8APPM3wl53slPz4mZ889Y2D1ODsa/zZK+eNa/uQG3feXACvUZmt
TrZe8RaMt6fxuheR4N8Sj4vS0MB6+V5mmmiAdlvHqTJiPreTM3Shl69tCH63FPyrMzviXm+sFppYZ4DjVox58Nzk+ov
yzMk6WPqmPv/iObqW839OporR7qeArM5zQmv9aCHFgQRKhARvb+53iryl1Kkd1QqyebRJiVZ30pyK8lnLsmNvphFY6v
IrSKL2iuHeoOKbK4rkosJC3mwFeNPIcYkDDenpqOtmn5uNf0PpL0futnM7yP//JDlGwyIbx41FwAA
END_CODEGEN_DATA
*/
